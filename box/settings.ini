#!/system/bin/sh

# ════════════════════
# Box for Root - 配置文件
# ════════════════════

# 系统初始化：检查 busybox 并设置环境变量
if ! command -v busybox &> /dev/null; then
  export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/system/bin"
fi

# ════════════════════
# 核心路径配置 (请勿修改)
# ════════════════════

box_dir="/data/adb/box"
box_run="${box_dir}/run"
box_log="${box_run}/runs.log"
box_pid="${box_run}/box.pid"
bin_dir="${box_dir}/bin"
system_packages_file="/data/system/packages.list"
uid_list="${box_run}/appuid.list"

# ════════════════════
# 基础设置
# ════════════════════

# 开机自启
boot_auto_start="true"
current_time=$(date +"%H:%M")
box_user_group="root:net_admin"

# ════════════════════
# 代理核心配置
# ════════════════════

bin_name="mihomo"
bin_list=("mihomo" "sing-box" "xray" "v2fly" "hysteria")
bin_path="${bin_dir}/${bin_name}"
bin_log="${box_run}/${bin_name}.log"

# 启动时自动修改核心配置文件
auto_modify_config="true"

# ════════════════════
# 网络配置
# ════════════════════

# 网络模式: tun / tproxy / redirect / mixed / enhance
network_mode="tun"
tproxy_port="9898"
redir_port="9797"
ipv6="true"

# ════════════════════
# 订阅管理
# ════════════════════

# Mihomo 订阅链接数组
subscription_url_mihomo=()
# Mihomo 订阅配置文件名数组
name_provide_mihomo_config=()
# Mihomo 订阅文件存放目录
mihomo_provide_path="${box_dir}/mihomo/proxy_provider"

# 是否支持订阅中的自定义规则
custom_rules_subs="false"
name_provide_mihomo_rules="rules.yaml"
mihomo_provide_rules="${box_dir}/mihomo/provide/${name_provide_mihomo_rules}"

# Sing-box 订阅链接
subscription_url_singbox=""

# ════════════════════
# 网络状态控制
# ════════════════════

# 是否根据网络状态自动控制服务（总开关）
enable_network_service_control="false"
# WiFi 连接时是否启用模块
use_module_on_wifi="true"
# WiFi 断开时是否启用模块
use_module_on_wifi_disconnect="true"
# 是否启用 WiFi SSID 匹配
use_ssid_matching="false"
# SSID 匹配模式: blacklist (黑名单) / whitelist (白名单)
use_wifi_list_mode="blacklist"
# WiFi SSID 列表
wifi_ssids_list=("WiFi1" "WiFi2")
# 是否启用网络切换调试日志
inotify_log_enabled="true"

# ════════════════════
# 性能优化
# ════════════════════

# 内存限制
cgroup_memcg="false"
memcg_limit="100M"
# CPU 核心分配
cgroup_cpuset="false"
allow_cpu="0-7"
# 磁盘 I/O 权重
cgroup_blkio="false"
weight=""

# ════════════════════
# 核心配置文件路径
# ════════════════════

# Mihomo 配置文件
name_mihomo_config="config.yaml"
mihomo_config="${box_dir}/mihomo/${name_mihomo_config}"

# Sing-box 配置文件
name_sing_config="config.json"
sing_config="${box_dir}/sing-box/${name_sing_config}"

# Xray 配置文件
name_xray_config="config.json"
xray_config="${box_dir}/xray/${name_xray_config}"

# V2fly 配置文件
name_v2fly_config="config.json"
v2fly_config="${box_dir}/v2fly/${name_v2fly_config}"

# Hysteria 配置文件
name_hysteria_config="config.yaml"
hysteria_config="${box_dir}/hysteria/${name_hysteria_config}"

# ════════════════════
# 自动更新配置
# ════════════════════

# true: 覆盖配置文件, false: 只更新订阅
renew="false"
# 是否启用订阅自动更新
update_subscription="false"
# 是否启用 GeoX 数据自动更新
update_geo="false"

# 是否启用定时任务
run_crontab="false"
# 定时任务时间
interva_update="0 0,6,12,18 * * *"

# ════════════════════
# 下载设置
# ════════════════════

# GitHub 访问令牌
githubtoken=""
# 是否使用镜像加速 GitHub 下载
use_ghproxy="false"
# 镜像加速地址
url_ghproxy="https://ghfast.top"

# 核心版本: enable (稳定版) / disable (预发行版)
mihomo_stable="enable"
singbox_stable="enable"

# ════════════════════
# 代理规则配置（请勿修改）
# ════════════════════

write_listap="${box_dir}/ap.list.cfg"
pkg_config="${box_dir}/package.list.cfg"
[ ! -f "${write_listap}" ] && touch "${write_listap}"
[ ! -f "${pkg_config}" ] && touch "${pkg_config}"

proxy_mode=$(sed -n 's/^mode:[[:space:]]*\([^[:space:]]*\).*/\1/p' "${pkg_config}")

prefixed_list=($(sed -n '/^[0-9][0-9]*:/p' "${pkg_config}"))
unprefixed_list_converted=($(sed -n '/\./p' "${pkg_config}" | grep -v -E '^[0-9]+:|^[0-9]+$|^[[:space:]]*#' | sed 's/^/0:/'))
packages_list=("${prefixed_list[@]}" "${unprefixed_list_converted[@]}")
gid_list=($(busybox awk '!/^#/ && /^[0-9]+$/ {print $1}' "${pkg_config}"))

ap_list=($(busybox awk '/^allow / {print $2}' "${write_listap}"))
ignore_out_list=($(busybox awk '/^ignore / {print $2}' "${write_listap}"))

# ════════════════════
# 日志系统（请勿修改）
# ════════════════════

log() {
  local normal="\033[0m"
  local red="\033[1;31m"
  local green="\033[1;32m"
  local yellow="\033[1;33m"
  local blue="\033[1;34m"
  local color
  
  case $1 in
    Info) color="${blue}" ;;
    Error) color="${red}" ;;
    Warning) color="${yellow}" ;;
    *) color="${green}" ;;
  esac
  
  local message="${current_time} [$1]: $2"
  
  if [ -t 1 ]; then
    echo -e "${color}${message}${normal}"
  else
    echo "${message}" | tee -a "${box_log}"
  fi
  
  [[ $TOAST ]] && true
}

