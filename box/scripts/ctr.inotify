#!/system/bin/sh

export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/data/data/com.termux/files/usr/bin"

BASE_DIR="/data/adb/box"
LOG_DIR="${BASE_DIR}/run"
SCRIPTS_DIR="$(dirname "$(realpath "$0")")"
LOG_FILE="${LOG_DIR}/netswitch.log"
STATE_FILE="${LOG_DIR}/last_check_time"
WIFI_STATE_FILE="${LOG_DIR}/last_wifi_state"
STABILITY_WINDOW=3

[ "$1" != "w" ] && exit 0
source "${BASE_DIR}/settings.ini"

[ "$enable_network_service_control" != "true" ] && exit 0
source "${SCRIPTS_DIR}/ctr.utils"

mkdir -p "$RUN_DIR"

log_msg() {
  [ "$inotify_log_enabled" = "true" ] || return 0
  echo "$(date '+%Y-%m-%d %H:%M:%S') - $*" >> "$LOG_FILE"
}

clean_old_logs() {
  [ -f "$LOG_FILE" ] || return 0
  
  local cutoff=$(date -d '24 hours ago' '+%Y-%m-%d %H:%M:%S' 2>/dev/null)
  [ -n "$cutoff" ] || return 0
  
  busybox awk -v c="$cutoff" '!/^[0-9]{4}-/ || substr($0,1,19)>=c' "$LOG_FILE" > "${LOG_FILE}.tmp" && 
    mv "${LOG_FILE}.tmp" "$LOG_FILE"
}

check_stability_window() {
  local current=$(date +%s)
  local last=0
  
  [ -f "$STATE_FILE" ] && last=$(cat "$STATE_FILE" 2>/dev/null || echo 0)
  
  if [ $((current - last)) -lt $STABILITY_WINDOW ]; then
    log_msg "跳过: 稳定窗口内 ($((current - last))秒)"
    exit 0
  fi
  
  echo "$current" > "$STATE_FILE"
}

is_service_running() {
  [ -f "$box_pid" ] && kill -0 $(cat "$box_pid" 2>/dev/null) 2>/dev/null
}

start_service() {
  is_service_running && return 0
  
  "${SCRIPTS_DIR}/box.service" start
  "${SCRIPTS_DIR}/box.iptables" enable
  log_msg "[启动] 服务已启动"
}

stop_service() {
  is_service_running || return 0
  
  "${SCRIPTS_DIR}/box.iptables" disable
  "${SCRIPTS_DIR}/box.service" stop
  log_msg "[停止] 服务已停止"
}

save_wifi_state() {
  local ssid="$1"
  local ip="$2"
  
  cat > "$WIFI_STATE_FILE" <<-EOF
	ssid:${ssid}
	ip:${ip}
	EOF
}

main() {
  clean_old_logs
  check_stability_window
  
  local wifi_status=$(is_wifi_connected)
  local ssid=$(get_current_ssid)
  local wifi_ip
  
  log_msg "--- 网络状态检查 ---"
  
  if [ "$wifi_status" = "wifi" ]; then
    # 等待 IP 地址
    for i in 1 2 3; do
      wifi_ip=$(get_wifi_ip)
      [ -n "$wifi_ip" ] && break
      sleep 1
    done
    
    if [ -z "$wifi_ip" ]; then
      log_msg "WiFi 连接中，等待 IP 地址"
      exit 0
    fi
    
    log_msg "WiFi: ${ssid}, IP: ${wifi_ip}"
    save_wifi_state "$ssid" "$wifi_ip"
  else
    log_msg "WiFi: 已断开"
  fi
  
  # 判断是否应该启用服务
  if should_enable_service "$wifi_status" "$ssid"; then
    log_msg "策略: 启用服务"
    start_service
  else
    log_msg "策略: 禁用服务"
    stop_service
  fi
  
  log_msg "操作完成"
}

main